//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kota_FrontEnd.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Kota_BackEnd")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int activeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int active {
            get {
                return this.activeField;
            }
            set {
                if ((this.activeField.Equals(value) != true)) {
                    this.activeField = value;
                    this.RaisePropertyChanged("active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string contact {
            get {
                return this.contactField;
            }
            set {
                if ((object.ReferenceEquals(this.contactField, value) != true)) {
                    this.contactField = value;
                    this.RaisePropertyChanged("contact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstnameField, value) != true)) {
                    this.firstnameField = value;
                    this.RaisePropertyChanged("firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastnameField, value) != true)) {
                    this.lastnameField = value;
                    this.RaisePropertyChanged("lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="productTable", Namespace="http://schemas.datacontract.org/2004/07/Kota_BackEnd")]
    [System.SerializableAttribute()]
    public partial class productTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpecialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UpdateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Special {
            get {
                return this.SpecialField;
            }
            set {
                if ((this.SpecialField.Equals(value) != true)) {
                    this.SpecialField = value;
                    this.RaisePropertyChanged("Special");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Update {
            get {
                return this.UpdateField;
            }
            set {
                if ((this.UpdateField.Equals(value) != true)) {
                    this.UpdateField = value;
                    this.RaisePropertyChanged("Update");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/Kota_BackEnd")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int activeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string imageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int specialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int updateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int active {
            get {
                return this.activeField;
            }
            set {
                if ((this.activeField.Equals(value) != true)) {
                    this.activeField = value;
                    this.RaisePropertyChanged("active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int code {
            get {
                return this.codeField;
            }
            set {
                if ((this.codeField.Equals(value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string image {
            get {
                return this.imageField;
            }
            set {
                if ((object.ReferenceEquals(this.imageField, value) != true)) {
                    this.imageField = value;
                    this.RaisePropertyChanged("image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int special {
            get {
                return this.specialField;
            }
            set {
                if ((this.specialField.Equals(value) != true)) {
                    this.specialField = value;
                    this.RaisePropertyChanged("special");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int update {
            get {
                return this.updateField;
            }
            set {
                if ((this.updateField.Equals(value) != true)) {
                    this.updateField = value;
                    this.RaisePropertyChanged("update");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IBackEnd")]
    public interface IBackEnd {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/Register", ReplyAction="http://tempuri.org/IBackEnd/RegisterResponse")]
        int Register(Kota_FrontEnd.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/Register", ReplyAction="http://tempuri.org/IBackEnd/RegisterResponse")]
        System.Threading.Tasks.Task<int> RegisterAsync(Kota_FrontEnd.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/IsRegistered", ReplyAction="http://tempuri.org/IBackEnd/IsRegisteredResponse")]
        bool IsRegistered(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/IsRegistered", ReplyAction="http://tempuri.org/IBackEnd/IsRegisteredResponse")]
        System.Threading.Tasks.Task<bool> IsRegisteredAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/Login", ReplyAction="http://tempuri.org/IBackEnd/LoginResponse")]
        bool Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/Login", ReplyAction="http://tempuri.org/IBackEnd/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUser", ReplyAction="http://tempuri.org/IBackEnd/GetUserResponse")]
        Kota_FrontEnd.ServiceReference.User GetUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUser", ReplyAction="http://tempuri.org/IBackEnd/GetUserResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.User> GetUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUserToUpdate", ReplyAction="http://tempuri.org/IBackEnd/GetUserToUpdateResponse")]
        Kota_FrontEnd.ServiceReference.User GetUserToUpdate(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUserToUpdate", ReplyAction="http://tempuri.org/IBackEnd/GetUserToUpdateResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.User> GetUserToUpdateAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/FindUser", ReplyAction="http://tempuri.org/IBackEnd/FindUserResponse")]
        int FindUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/FindUser", ReplyAction="http://tempuri.org/IBackEnd/FindUserResponse")]
        System.Threading.Tasks.Task<int> FindUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateUser", ReplyAction="http://tempuri.org/IBackEnd/UpdateUserResponse")]
        bool UpdateUser(Kota_FrontEnd.ServiceReference.User user, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateUser", ReplyAction="http://tempuri.org/IBackEnd/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(Kota_FrontEnd.ServiceReference.User user, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetAllProducts", ReplyAction="http://tempuri.org/IBackEnd/GetAllProductsResponse")]
        Kota_FrontEnd.ServiceReference.productTable[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetAllProducts", ReplyAction="http://tempuri.org/IBackEnd/GetAllProductsResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetAllKotaProducts", ReplyAction="http://tempuri.org/IBackEnd/GetAllKotaProductsResponse")]
        Kota_FrontEnd.ServiceReference.productTable[] GetAllKotaProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetAllKotaProducts", ReplyAction="http://tempuri.org/IBackEnd/GetAllKotaProductsResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetAllKotaProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetALlBunnyProducts", ReplyAction="http://tempuri.org/IBackEnd/GetALlBunnyProductsResponse")]
        Kota_FrontEnd.ServiceReference.productTable[] GetALlBunnyProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetALlBunnyProducts", ReplyAction="http://tempuri.org/IBackEnd/GetALlBunnyProductsResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetALlBunnyProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetProducts", ReplyAction="http://tempuri.org/IBackEnd/GetProductsResponse")]
        Kota_FrontEnd.ServiceReference.productTable[] GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetProducts", ReplyAction="http://tempuri.org/IBackEnd/GetProductsResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddNewProduct", ReplyAction="http://tempuri.org/IBackEnd/AddNewProductResponse")]
        bool AddNewProduct(Kota_FrontEnd.ServiceReference.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddNewProduct", ReplyAction="http://tempuri.org/IBackEnd/AddNewProductResponse")]
        System.Threading.Tasks.Task<bool> AddNewProductAsync(Kota_FrontEnd.ServiceReference.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DoesProductExist", ReplyAction="http://tempuri.org/IBackEnd/DoesProductExistResponse")]
        bool DoesProductExist(string p_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DoesProductExist", ReplyAction="http://tempuri.org/IBackEnd/DoesProductExistResponse")]
        System.Threading.Tasks.Task<bool> DoesProductExistAsync(string p_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetProductID", ReplyAction="http://tempuri.org/IBackEnd/GetProductIDResponse")]
        int GetProductID(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetProductID", ReplyAction="http://tempuri.org/IBackEnd/GetProductIDResponse")]
        System.Threading.Tasks.Task<int> GetProductIDAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetProduct", ReplyAction="http://tempuri.org/IBackEnd/GetProductResponse")]
        Kota_FrontEnd.ServiceReference.Product GetProduct(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetProduct", ReplyAction="http://tempuri.org/IBackEnd/GetProductResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.Product> GetProductAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/RemoveProduct", ReplyAction="http://tempuri.org/IBackEnd/RemoveProductResponse")]
        bool RemoveProduct(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/RemoveProduct", ReplyAction="http://tempuri.org/IBackEnd/RemoveProductResponse")]
        System.Threading.Tasks.Task<bool> RemoveProductAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateProducts", ReplyAction="http://tempuri.org/IBackEnd/UpdateProductsResponse")]
        Kota_FrontEnd.ServiceReference.productTable[] UpdateProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateProducts", ReplyAction="http://tempuri.org/IBackEnd/UpdateProductsResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> UpdateProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateProductByID", ReplyAction="http://tempuri.org/IBackEnd/UpdateProductByIDResponse")]
        bool UpdateProductByID(Kota_FrontEnd.ServiceReference.Product product, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateProductByID", ReplyAction="http://tempuri.org/IBackEnd/UpdateProductByIDResponse")]
        System.Threading.Tasks.Task<bool> UpdateProductByIDAsync(Kota_FrontEnd.ServiceReference.Product product, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetOnSpecial", ReplyAction="http://tempuri.org/IBackEnd/GetOnSpecialResponse")]
        Kota_FrontEnd.ServiceReference.productTable[] GetOnSpecial();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetOnSpecial", ReplyAction="http://tempuri.org/IBackEnd/GetOnSpecialResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetOnSpecialAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AboutProduct", ReplyAction="http://tempuri.org/IBackEnd/AboutProductResponse")]
        Kota_FrontEnd.ServiceReference.productTable AboutProduct(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AboutProduct", ReplyAction="http://tempuri.org/IBackEnd/AboutProductResponse")]
        System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable> AboutProductAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBackEndChannel : Kota_FrontEnd.ServiceReference.IBackEnd, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackEndClient : System.ServiceModel.ClientBase<Kota_FrontEnd.ServiceReference.IBackEnd>, Kota_FrontEnd.ServiceReference.IBackEnd {
        
        public BackEndClient() {
        }
        
        public BackEndClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BackEndClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackEndClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackEndClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Register(Kota_FrontEnd.ServiceReference.User user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<int> RegisterAsync(Kota_FrontEnd.ServiceReference.User user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public bool IsRegistered(string email, string password) {
            return base.Channel.IsRegistered(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsRegisteredAsync(string email, string password) {
            return base.Channel.IsRegisteredAsync(email, password);
        }
        
        public bool Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public Kota_FrontEnd.ServiceReference.User GetUser(string email) {
            return base.Channel.GetUser(email);
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.User> GetUserAsync(string email) {
            return base.Channel.GetUserAsync(email);
        }
        
        public Kota_FrontEnd.ServiceReference.User GetUserToUpdate(string ID) {
            return base.Channel.GetUserToUpdate(ID);
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.User> GetUserToUpdateAsync(string ID) {
            return base.Channel.GetUserToUpdateAsync(ID);
        }
        
        public int FindUser(string email) {
            return base.Channel.FindUser(email);
        }
        
        public System.Threading.Tasks.Task<int> FindUserAsync(string email) {
            return base.Channel.FindUserAsync(email);
        }
        
        public bool UpdateUser(Kota_FrontEnd.ServiceReference.User user, int id) {
            return base.Channel.UpdateUser(user, id);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(Kota_FrontEnd.ServiceReference.User user, int id) {
            return base.Channel.UpdateUserAsync(user, id);
        }
        
        public Kota_FrontEnd.ServiceReference.productTable[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public Kota_FrontEnd.ServiceReference.productTable[] GetAllKotaProducts() {
            return base.Channel.GetAllKotaProducts();
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetAllKotaProductsAsync() {
            return base.Channel.GetAllKotaProductsAsync();
        }
        
        public Kota_FrontEnd.ServiceReference.productTable[] GetALlBunnyProducts() {
            return base.Channel.GetALlBunnyProducts();
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetALlBunnyProductsAsync() {
            return base.Channel.GetALlBunnyProductsAsync();
        }
        
        public Kota_FrontEnd.ServiceReference.productTable[] GetProducts() {
            return base.Channel.GetProducts();
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetProductsAsync() {
            return base.Channel.GetProductsAsync();
        }
        
        public bool AddNewProduct(Kota_FrontEnd.ServiceReference.Product product) {
            return base.Channel.AddNewProduct(product);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewProductAsync(Kota_FrontEnd.ServiceReference.Product product) {
            return base.Channel.AddNewProductAsync(product);
        }
        
        public bool DoesProductExist(string p_code) {
            return base.Channel.DoesProductExist(p_code);
        }
        
        public System.Threading.Tasks.Task<bool> DoesProductExistAsync(string p_code) {
            return base.Channel.DoesProductExistAsync(p_code);
        }
        
        public int GetProductID(string ID) {
            return base.Channel.GetProductID(ID);
        }
        
        public System.Threading.Tasks.Task<int> GetProductIDAsync(string ID) {
            return base.Channel.GetProductIDAsync(ID);
        }
        
        public Kota_FrontEnd.ServiceReference.Product GetProduct(string ID) {
            return base.Channel.GetProduct(ID);
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.Product> GetProductAsync(string ID) {
            return base.Channel.GetProductAsync(ID);
        }
        
        public bool RemoveProduct(string id) {
            return base.Channel.RemoveProduct(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveProductAsync(string id) {
            return base.Channel.RemoveProductAsync(id);
        }
        
        public Kota_FrontEnd.ServiceReference.productTable[] UpdateProducts() {
            return base.Channel.UpdateProducts();
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> UpdateProductsAsync() {
            return base.Channel.UpdateProductsAsync();
        }
        
        public bool UpdateProductByID(Kota_FrontEnd.ServiceReference.Product product, int id) {
            return base.Channel.UpdateProductByID(product, id);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateProductByIDAsync(Kota_FrontEnd.ServiceReference.Product product, int id) {
            return base.Channel.UpdateProductByIDAsync(product, id);
        }
        
        public Kota_FrontEnd.ServiceReference.productTable[] GetOnSpecial() {
            return base.Channel.GetOnSpecial();
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable[]> GetOnSpecialAsync() {
            return base.Channel.GetOnSpecialAsync();
        }
        
        public Kota_FrontEnd.ServiceReference.productTable AboutProduct(string id) {
            return base.Channel.AboutProduct(id);
        }
        
        public System.Threading.Tasks.Task<Kota_FrontEnd.ServiceReference.productTable> AboutProductAsync(string id) {
            return base.Channel.AboutProductAsync(id);
        }
    }
}
